@{
Page.Title = "Редактирование страницы";        

    var pageId = Request["Id"];
    if(pageId == null || pageId.IsEmpty()){
        Response.SetStatus(HttpStatusCode.BadRequest);
    }
     
     
     var errorm = "";
     var pagetitlevalid = false;
     var pageurlvalid = false;
     var pagecontentvalid = false;
     var pagelayoutvalid = false;
     var IsValid = true;



    var db = Database.Open("Datebase");

    var data = db.QuerySingle("SELECT * FROM Pages WHERE Id = @0", pageId);

    var today = DateTime.Now;
    var MasterPage = data.Layout;
    DirectoryInfo dirInfo = new DirectoryInfo(Server.MapPath("~/Components/Layouts"));
    FileInfo[] fileInfo = dirInfo.GetFiles("_*.cshtml", SearchOption.TopDirectoryOnly  );


    if(IsPost){
        AntiForgery.Validate();
        var pagetitle = Request["pagetitle"];
        if(pagetitle.IsEmpty()){
            pagetitlevalid = true;
            IsValid = false;
        }


        var pageurl = Request["pageurl"];
        if(pageurl.IsEmpty()){
            pageurlvalid = true;
            IsValid = false;
        }

        var pagedescr = Request.Unvalidated("pagedescr");
        

        var pageauthtor = Request["pageauthtor"];
        

        
        var pagecontent = Request.Unvalidated("pagecontent"); // Validation bypassed
        if(pagecontent.IsEmpty()){
            pagecontentvalid = true;
            IsValid = false;
        }

        var pagelayout = Request["pagelayout"];
        if(pagelayout.IsEmpty()){
            pagelayoutvalid = true;
            IsValid = false;
        }

        /*var submitted = Request["submitted"];
        if(submitted.IsEmpty()){
            submitted = DateTime.Now.Date;
        }*/

        if(IsValid){
            
        

                try{
                    db.Execute("UPDATE Pages SET Name=@0, Content=@1, Date=@2, Url=@3, Layout=@4, Description=@5, Author=@6 WHERE Id=@7 ", pagetitle, pagecontent, today, pageurl, pagelayout, pagedescr, pageauthtor, pageId);
                    Response.Redirect("~/Components/Control/PageEdit?id=" + pageId);
                } catch (Exception ex){
                    errorm = ex.Message.ToString();
                }
        }
    }

}

@errorm
<form action="@Request.Url" method="post">
    @AntiForgery.GetHtml()
    <table>
        <tbody>
            <tr>
                <td class="table-label">
                    <label for="pagetitle">Название страницы*:</label>
                </td>
                <td>
                    <input required class="input" id="pagetitle" type="text" name="pagetitle" value="@data.Name"/>
            @if(pagetitlevalid){
                <text>
                    <span class="form-error">
                        Название страницы не может быть пустым
                    </span>
                </text>
            }
                </td>
            </tr>
            <tr>
                <td class="table-label">
                    <label for="pageurl">Адрес страницы*:</label>
                </td>
                <td>
                    <span class="form-input-link"><span class="t-link">
            @Request.Url.Scheme://@Request.Url.Authority/</span><input required type="text" id="pageurl" class="input url" name="pageurl" value="@data.Url"/></span>
            @if(pageurlvalid){
                <text>
                    <span class="form-error">
                        Адрес страницы не может быть пустым
                    </span>
                </text>
            }
                </td>
            </tr>
        <tr>
                <td class="table-label">
                    <label for="pageauthtor">Автор страницы:</label>
                </td>
                <td>
                    <input class="input" id="pageauthtor" type="text" name="pageauthtor" value="@data.Author"/>
                </td>
            </tr>
        <tr>
                <td class="table-label">
                    <label for="pagelayout">Макет страницы:</label>
                </td>
                <td>
                    <select required id="pagelayout" name="pagelayout">
                @foreach (var f in fileInfo)
               {
                <option value="@Functions.CleanRCNames(f.Name)" @if (MasterPage == f.Name)
                                        {<text>selected="selected"</text>}>@Functions.CleanRCNames(f.Name)</option>
               }
            </select>
             @if(pagelayoutvalid){
                <text>
                    <span class="form-error">
                        Страница не может быть без макета
                    </span>
                </text>
            }
                </td>
            </tr>
        <tr>
                <td class="table-label">
                    <label for="pagedescr">Описание страницы:</label>
                </td>
                <td>
                    <input class="input" id="pagedescr" type="text" name="pagedescr" value="@data.Description"/>
                </td>
            </tr>
        @*<tr>
                <td class="table-label">
                    <label for="submitted">Описание страницы:</label>
                </td>
                <td>
                    <input class="input" id="submitted" type="date" name="submitted" value="@data.Submitted"/>
                </td>
            </tr>*@
        </tbody>
    </table>

    <label class="table-label" for="pagecontent">Содежимое страницы*</label>
            @if(pagecontentvalid){
                <text>
                    <span class="form-error">
                        
                        Страница не может быть пустой
                    </span>
                </text>
            }
            <textarea id="pagecontent" name="pagecontent" style="width:80%;height: 400px;min-width: 400px;">@data.Content</textarea>

    <input type="submit" class="btn" value="Сохранить"/>

 

    
</form>






<script type="text/javascript" src="~/components/tinymce/jscripts/tiny_mce/tiny_mce.js"></script>
<script type="text/javascript">
tinyMCE.init({
    mode : "textareas",
    theme : "advanced",
    theme_advanced_buttons1 : "mybutton,bold,italic,underline,separator,strikethrough,justifyleft,justifycenter,justifyright, justifyfull,bullist,numlist,undo,redo,link,unlink,code,image,fontsizeselect",
    theme_advanced_buttons2 : "",
    theme_advanced_buttons3 : "",
    theme_advanced_toolbar_location : "top",
    theme_advanced_toolbar_align : "left",
    theme_advanced_statusbar_location : "bottom",
    plugins : 'inlinepopups',
    setup : function(ed) {
        // Add a custom button
        ed.addButton('mybutton', {
            title : 'My button',
            image : 'img/example.gif',
            onclick : function() {
                // Add you own code to execute something on click
                ed.focus();
                ed.selection.setContent('Hello world!');
            }
        });
    }
});
</script>

